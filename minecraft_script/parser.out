Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression MULTIPLY expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 6     expression -> NUMBER
Rule 7     expression -> NAME
Rule 8     statement -> VAR_DEFINE NAME EQUALS expression
Rule 9     expression -> LOG expression
Rule 10    statement -> expression

Terminals, with rules where they appear

DIVIDE               : 4
EQUALS               : 8
LEFT_PARENTHESIS     : 5
LOG                  : 9
MINUS                : 2
MULTIPLY             : 3
NAME                 : 7 8
NUMBER               : 6
PLUS                 : 1
RIGHT_PARENTHESIS    : 5
VAR_DEFINE           : 8
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 8 9 10 0
statement            : 

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9


state 2

    (5) expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 10

state 3

    (6) expression -> NUMBER .

    PLUS            reduce using rule 6 (expression -> NUMBER .)
    MINUS           reduce using rule 6 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 6 (expression -> NUMBER .)
    DIVIDE          reduce using rule 6 (expression -> NUMBER .)
    $end            reduce using rule 6 (expression -> NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 6 (expression -> NUMBER .)


state 4

    (7) expression -> NAME .

    PLUS            reduce using rule 7 (expression -> NAME .)
    MINUS           reduce using rule 7 (expression -> NAME .)
    MULTIPLY        reduce using rule 7 (expression -> NAME .)
    DIVIDE          reduce using rule 7 (expression -> NAME .)
    $end            reduce using rule 7 (expression -> NAME .)
    RIGHT_PARENTHESIS reduce using rule 7 (expression -> NAME .)


state 5

    (9) expression -> LOG . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 11

state 6

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 12

state 7

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 13

state 8

    (3) expression -> expression MULTIPLY . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 14

state 9

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (6) expression -> . NUMBER
    (7) expression -> . NAME
    (9) expression -> . LOG expression

    LEFT_PARENTHESIS shift and go to state 2
    NUMBER          shift and go to state 3
    NAME            shift and go to state 4
    LOG             shift and go to state 5

    expression                     shift and go to state 15

state 10

    (5) expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    RIGHT_PARENTHESIS shift and go to state 16
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9


state 11

    (9) expression -> LOG expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 9 (expression -> LOG expression .)
    RIGHT_PARENTHESIS reduce using rule 9 (expression -> LOG expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9

  ! PLUS            [ reduce using rule 9 (expression -> LOG expression .) ]
  ! MINUS           [ reduce using rule 9 (expression -> LOG expression .) ]
  ! MULTIPLY        [ reduce using rule 9 (expression -> LOG expression .) ]
  ! DIVIDE          [ reduce using rule 9 (expression -> LOG expression .) ]


state 12

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RIGHT_PARENTHESIS reduce using rule 1 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9

  ! PLUS            [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! MINUS           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! MULTIPLY        [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]


state 13

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RIGHT_PARENTHESIS reduce using rule 2 (expression -> expression MINUS expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9

  ! PLUS            [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! MINUS           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! MULTIPLY        [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]


state 14

    (3) expression -> expression MULTIPLY expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 3 (expression -> expression MULTIPLY expression .)
    RIGHT_PARENTHESIS reduce using rule 3 (expression -> expression MULTIPLY expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9

  ! PLUS            [ reduce using rule 3 (expression -> expression MULTIPLY expression .) ]
  ! MINUS           [ reduce using rule 3 (expression -> expression MULTIPLY expression .) ]
  ! MULTIPLY        [ reduce using rule 3 (expression -> expression MULTIPLY expression .) ]
  ! DIVIDE          [ reduce using rule 3 (expression -> expression MULTIPLY expression .) ]


state 15

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MULTIPLY resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RIGHT_PARENTHESIS reduce using rule 4 (expression -> expression DIVIDE expression .)
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    MULTIPLY        shift and go to state 8
    DIVIDE          shift and go to state 9

  ! PLUS            [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! MINUS           [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! MULTIPLY        [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]
  ! DIVIDE          [ reduce using rule 4 (expression -> expression DIVIDE expression .) ]


state 16

    (5) expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    PLUS            reduce using rule 5 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MINUS           reduce using rule 5 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    MULTIPLY        reduce using rule 5 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    DIVIDE          reduce using rule 5 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    $end            reduce using rule 5 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 5 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 11 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 11 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 11 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 12 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 12 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 12 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 13 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 13 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 13 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 13 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 14 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 14 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MULTIPLY in state 15 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 15 resolved as shift
