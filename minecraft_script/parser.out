Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> VAR_DEFINE NAME = expression
Rule 2     statement -> CONST_DEFINE NAME = expression
Rule 3     statement -> FUNCTION_DEFINE NAME = function
Rule 4     statement -> VAR_DEFINE NAME
Rule 5     statement -> CONST_DEFINE NAME
Rule 6     statement -> NAME = expression
Rule 7     statement -> LOG expression
Rule 8     statement -> LOGTYPE NAME
Rule 9     statement -> LOGTYPE NUMBER
Rule 10    statement -> expression
Rule 11    expression -> expression + expression
Rule 12    expression -> expression - expression
Rule 13    expression -> expression * expression
Rule 14    expression -> expression / expression
Rule 15    expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
Rule 16    expression -> NUMBER
Rule 17    expression -> NAME
Rule 18    expression_repeat -> <empty>
Rule 19    expression_repeat -> expression expression_repeat
Rule 20    statement -> function LEFT_PARENTHESIS expression_repeat RIGHT_PARENTHESIS
Rule 21    function -> FUNCTION_PARAMETER FUNCTION_ARROW FUNCTION_BLOCK

Terminals, with rules where they appear

*                    : 13
+                    : 11
-                    : 12
/                    : 14
=                    : 1 2 3 6
CONST_DEFINE         : 2 5
FUNCTION_ARROW       : 21
FUNCTION_BLOCK       : 21
FUNCTION_DEFINE      : 3
FUNCTION_PARAMETER   : 21
LEFT_PARENTHESIS     : 15 20
LOG                  : 7
LOGTYPE              : 8 9
NAME                 : 1 2 3 4 5 6 8 17
NUMBER               : 9 16
RIGHT_PARENTHESIS    : 15 20
VAR_DEFINE           : 1 4
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 6 7 10 11 11 12 12 13 13 14 14 15 19
expression_repeat    : 19 20
function             : 3 20
statement            : 0

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . VAR_DEFINE NAME = expression
    (2) statement -> . CONST_DEFINE NAME = expression
    (3) statement -> . FUNCTION_DEFINE NAME = function
    (4) statement -> . VAR_DEFINE NAME
    (5) statement -> . CONST_DEFINE NAME
    (6) statement -> . NAME = expression
    (7) statement -> . LOG expression
    (8) statement -> . LOGTYPE NAME
    (9) statement -> . LOGTYPE NUMBER
    (10) statement -> . expression
    (20) statement -> . function LEFT_PARENTHESIS expression_repeat RIGHT_PARENTHESIS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME
    (21) function -> . FUNCTION_PARAMETER FUNCTION_ARROW FUNCTION_BLOCK

    VAR_DEFINE      shift and go to state 2
    CONST_DEFINE    shift and go to state 5
    FUNCTION_DEFINE shift and go to state 6
    NAME            shift and go to state 3
    LOG             shift and go to state 8
    LOGTYPE         shift and go to state 9
    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    FUNCTION_PARAMETER shift and go to state 12

    statement                      shift and go to state 1
    expression                     shift and go to state 4
    function                       shift and go to state 7

state 1

    (0) S' -> statement .



state 2

    (1) statement -> VAR_DEFINE . NAME = expression
    (4) statement -> VAR_DEFINE . NAME

    NAME            shift and go to state 13


state 3

    (6) statement -> NAME . = expression
    (17) expression -> NAME .

    =               shift and go to state 14
    +               reduce using rule 17 (expression -> NAME .)
    -               reduce using rule 17 (expression -> NAME .)
    *               reduce using rule 17 (expression -> NAME .)
    /               reduce using rule 17 (expression -> NAME .)
    $end            reduce using rule 17 (expression -> NAME .)


state 4

    (10) statement -> expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 10 (statement -> expression .)
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 5

    (2) statement -> CONST_DEFINE . NAME = expression
    (5) statement -> CONST_DEFINE . NAME

    NAME            shift and go to state 19


state 6

    (3) statement -> FUNCTION_DEFINE . NAME = function

    NAME            shift and go to state 20


state 7

    (20) statement -> function . LEFT_PARENTHESIS expression_repeat RIGHT_PARENTHESIS

    LEFT_PARENTHESIS shift and go to state 21


state 8

    (7) statement -> LOG . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 22

state 9

    (8) statement -> LOGTYPE . NAME
    (9) statement -> LOGTYPE . NUMBER

    NAME            shift and go to state 24
    NUMBER          shift and go to state 25


state 10

    (16) expression -> NUMBER .

    +               reduce using rule 16 (expression -> NUMBER .)
    -               reduce using rule 16 (expression -> NUMBER .)
    *               reduce using rule 16 (expression -> NUMBER .)
    /               reduce using rule 16 (expression -> NUMBER .)
    $end            reduce using rule 16 (expression -> NUMBER .)
    RIGHT_PARENTHESIS reduce using rule 16 (expression -> NUMBER .)
    LEFT_PARENTHESIS reduce using rule 16 (expression -> NUMBER .)
    NUMBER          reduce using rule 16 (expression -> NUMBER .)
    NAME            reduce using rule 16 (expression -> NUMBER .)


state 11

    (15) expression -> LEFT_PARENTHESIS . expression RIGHT_PARENTHESIS
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 26

state 12

    (21) function -> FUNCTION_PARAMETER . FUNCTION_ARROW FUNCTION_BLOCK

    FUNCTION_ARROW  shift and go to state 27


state 13

    (1) statement -> VAR_DEFINE NAME . = expression
    (4) statement -> VAR_DEFINE NAME .

    =               shift and go to state 28
    $end            reduce using rule 4 (statement -> VAR_DEFINE NAME .)


state 14

    (6) statement -> NAME = . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 29

state 15

    (11) expression -> expression + . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 30

state 16

    (12) expression -> expression - . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 31

state 17

    (13) expression -> expression * . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 32

state 18

    (14) expression -> expression / . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 33

state 19

    (2) statement -> CONST_DEFINE NAME . = expression
    (5) statement -> CONST_DEFINE NAME .

    =               shift and go to state 34
    $end            reduce using rule 5 (statement -> CONST_DEFINE NAME .)


state 20

    (3) statement -> FUNCTION_DEFINE NAME . = function

    =               shift and go to state 35


state 21

    (20) statement -> function LEFT_PARENTHESIS . expression_repeat RIGHT_PARENTHESIS
    (18) expression_repeat -> .
    (19) expression_repeat -> . expression expression_repeat
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    RIGHT_PARENTHESIS reduce using rule 18 (expression_repeat -> .)
    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression_repeat              shift and go to state 36
    expression                     shift and go to state 37

state 22

    (7) statement -> LOG expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 7 (statement -> LOG expression .)
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 23

    (17) expression -> NAME .

    +               reduce using rule 17 (expression -> NAME .)
    -               reduce using rule 17 (expression -> NAME .)
    *               reduce using rule 17 (expression -> NAME .)
    /               reduce using rule 17 (expression -> NAME .)
    $end            reduce using rule 17 (expression -> NAME .)
    RIGHT_PARENTHESIS reduce using rule 17 (expression -> NAME .)
    LEFT_PARENTHESIS reduce using rule 17 (expression -> NAME .)
    NUMBER          reduce using rule 17 (expression -> NAME .)
    NAME            reduce using rule 17 (expression -> NAME .)


state 24

    (8) statement -> LOGTYPE NAME .

    $end            reduce using rule 8 (statement -> LOGTYPE NAME .)


state 25

    (9) statement -> LOGTYPE NUMBER .

    $end            reduce using rule 9 (statement -> LOGTYPE NUMBER .)


state 26

    (15) expression -> LEFT_PARENTHESIS expression . RIGHT_PARENTHESIS
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    RIGHT_PARENTHESIS shift and go to state 38
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 27

    (21) function -> FUNCTION_PARAMETER FUNCTION_ARROW . FUNCTION_BLOCK

    FUNCTION_BLOCK  shift and go to state 39


state 28

    (1) statement -> VAR_DEFINE NAME = . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 40

state 29

    (6) statement -> NAME = expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 6 (statement -> NAME = expression .)
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 30

    (11) expression -> expression + expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    +               reduce using rule 11 (expression -> expression + expression .)
    -               reduce using rule 11 (expression -> expression + expression .)
    $end            reduce using rule 11 (expression -> expression + expression .)
    RIGHT_PARENTHESIS reduce using rule 11 (expression -> expression + expression .)
    LEFT_PARENTHESIS reduce using rule 11 (expression -> expression + expression .)
    NUMBER          reduce using rule 11 (expression -> expression + expression .)
    NAME            reduce using rule 11 (expression -> expression + expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 11 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]


state 31

    (12) expression -> expression - expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    +               reduce using rule 12 (expression -> expression - expression .)
    -               reduce using rule 12 (expression -> expression - expression .)
    $end            reduce using rule 12 (expression -> expression - expression .)
    RIGHT_PARENTHESIS reduce using rule 12 (expression -> expression - expression .)
    LEFT_PARENTHESIS reduce using rule 12 (expression -> expression - expression .)
    NUMBER          reduce using rule 12 (expression -> expression - expression .)
    NAME            reduce using rule 12 (expression -> expression - expression .)
    *               shift and go to state 17
    /               shift and go to state 18

  ! *               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 12 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]


state 32

    (13) expression -> expression * expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    +               reduce using rule 13 (expression -> expression * expression .)
    -               reduce using rule 13 (expression -> expression * expression .)
    *               reduce using rule 13 (expression -> expression * expression .)
    /               reduce using rule 13 (expression -> expression * expression .)
    $end            reduce using rule 13 (expression -> expression * expression .)
    RIGHT_PARENTHESIS reduce using rule 13 (expression -> expression * expression .)
    LEFT_PARENTHESIS reduce using rule 13 (expression -> expression * expression .)
    NUMBER          reduce using rule 13 (expression -> expression * expression .)
    NAME            reduce using rule 13 (expression -> expression * expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]


state 33

    (14) expression -> expression / expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    +               reduce using rule 14 (expression -> expression / expression .)
    -               reduce using rule 14 (expression -> expression / expression .)
    *               reduce using rule 14 (expression -> expression / expression .)
    /               reduce using rule 14 (expression -> expression / expression .)
    $end            reduce using rule 14 (expression -> expression / expression .)
    RIGHT_PARENTHESIS reduce using rule 14 (expression -> expression / expression .)
    LEFT_PARENTHESIS reduce using rule 14 (expression -> expression / expression .)
    NUMBER          reduce using rule 14 (expression -> expression / expression .)
    NAME            reduce using rule 14 (expression -> expression / expression .)

  ! +               [ shift and go to state 15 ]
  ! -               [ shift and go to state 16 ]
  ! *               [ shift and go to state 17 ]
  ! /               [ shift and go to state 18 ]


state 34

    (2) statement -> CONST_DEFINE NAME = . expression
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 41

state 35

    (3) statement -> FUNCTION_DEFINE NAME = . function
    (21) function -> . FUNCTION_PARAMETER FUNCTION_ARROW FUNCTION_BLOCK

    FUNCTION_PARAMETER shift and go to state 12

    function                       shift and go to state 42

state 36

    (20) statement -> function LEFT_PARENTHESIS expression_repeat . RIGHT_PARENTHESIS

    RIGHT_PARENTHESIS shift and go to state 43


state 37

    (19) expression_repeat -> expression . expression_repeat
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression
    (18) expression_repeat -> .
    (19) expression_repeat -> . expression expression_repeat
    (11) expression -> . expression + expression
    (12) expression -> . expression - expression
    (13) expression -> . expression * expression
    (14) expression -> . expression / expression
    (15) expression -> . LEFT_PARENTHESIS expression RIGHT_PARENTHESIS
    (16) expression -> . NUMBER
    (17) expression -> . NAME

    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18
    RIGHT_PARENTHESIS reduce using rule 18 (expression_repeat -> .)
    LEFT_PARENTHESIS shift and go to state 11
    NUMBER          shift and go to state 10
    NAME            shift and go to state 23

    expression                     shift and go to state 37
    expression_repeat              shift and go to state 44

state 38

    (15) expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .

    +               reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    -               reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    *               reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    /               reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    $end            reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    RIGHT_PARENTHESIS reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    LEFT_PARENTHESIS reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NUMBER          reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)
    NAME            reduce using rule 15 (expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS .)


state 39

    (21) function -> FUNCTION_PARAMETER FUNCTION_ARROW FUNCTION_BLOCK .

    LEFT_PARENTHESIS reduce using rule 21 (function -> FUNCTION_PARAMETER FUNCTION_ARROW FUNCTION_BLOCK .)
    $end            reduce using rule 21 (function -> FUNCTION_PARAMETER FUNCTION_ARROW FUNCTION_BLOCK .)


state 40

    (1) statement -> VAR_DEFINE NAME = expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 1 (statement -> VAR_DEFINE NAME = expression .)
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 41

    (2) statement -> CONST_DEFINE NAME = expression .
    (11) expression -> expression . + expression
    (12) expression -> expression . - expression
    (13) expression -> expression . * expression
    (14) expression -> expression . / expression

    $end            reduce using rule 2 (statement -> CONST_DEFINE NAME = expression .)
    +               shift and go to state 15
    -               shift and go to state 16
    *               shift and go to state 17
    /               shift and go to state 18


state 42

    (3) statement -> FUNCTION_DEFINE NAME = function .

    $end            reduce using rule 3 (statement -> FUNCTION_DEFINE NAME = function .)


state 43

    (20) statement -> function LEFT_PARENTHESIS expression_repeat RIGHT_PARENTHESIS .

    $end            reduce using rule 20 (statement -> function LEFT_PARENTHESIS expression_repeat RIGHT_PARENTHESIS .)


state 44

    (19) expression_repeat -> expression expression_repeat .

    RIGHT_PARENTHESIS reduce using rule 19 (expression_repeat -> expression expression_repeat .)

