
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/LOG NAME NUMBER VAR_DEFINEstatement : VAR_DEFINE NAME "=" expressionstatement : VAR_DEFINE NAMEstatement : NAME "=" expressionstatement : LOG expressionstatement : expressionexpression : expression \'+\' expressionexpression : expression \'-\' expressionexpression : expression \'*\' expressionexpression : expression \'/\' expressionexpression : \'(\' expression \')\'expression : NUMBERexpression : NAME'
    
_lr_action_items = {'VAR_DEFINE':([0,],[2,]),'NAME':([0,2,5,6,9,10,11,12,13,17,],[3,8,15,15,15,15,15,15,15,15,]),'LOG':([0,],[5,]),'(':([0,5,6,9,10,11,12,13,17,],[6,6,6,6,6,6,6,6,6,]),'NUMBER':([0,5,6,9,10,11,12,13,17,],[7,7,7,7,7,7,7,7,7,]),'$end':([1,3,4,7,8,14,15,18,19,20,21,22,23,24,],[0,-12,-5,-11,-2,-4,-12,-3,-6,-7,-8,-9,-10,-1,]),'=':([3,8,],[9,17,]),'+':([3,4,7,14,15,16,18,19,20,21,22,23,24,],[-12,10,-11,10,-12,10,10,-6,-7,-8,-9,-10,10,]),'-':([3,4,7,14,15,16,18,19,20,21,22,23,24,],[-12,11,-11,11,-12,11,11,-6,-7,-8,-9,-10,11,]),'*':([3,4,7,14,15,16,18,19,20,21,22,23,24,],[-12,12,-11,12,-12,12,12,12,12,-8,-9,-10,12,]),'/':([3,4,7,14,15,16,18,19,20,21,22,23,24,],[-12,13,-11,13,-12,13,13,13,13,-8,-9,-10,13,]),')':([7,15,16,19,20,21,22,23,],[-11,-12,23,-6,-7,-8,-9,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,5,6,9,10,11,12,13,17,],[4,14,16,18,19,20,21,22,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> VAR_DEFINE NAME = expression','statement',4,'p_statement_define_value','parser.py',15),
  ('statement -> VAR_DEFINE NAME','statement',2,'p_statement_define','parser.py',20),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','parser.py',25),
  ('statement -> LOG expression','statement',2,'p_statement_log','parser.py',32),
  ('statement -> expression','statement',1,'p_statement_expr','parser.py',36),
  ('expression -> expression + expression','expression',3,'p_expression_add','parser.py',45),
  ('expression -> expression - expression','expression',3,'p_expression_subtract','parser.py',50),
  ('expression -> expression * expression','expression',3,'p_expression_multiply','parser.py',55),
  ('expression -> expression / expression','expression',3,'p_expression_divide','parser.py',60),
  ('expression -> ( expression )','expression',3,'p_expression_group','parser.py',69),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',74),
  ('expression -> NAME','expression',1,'p_expression_name','parser.py',79),
]
